import React, { useEffect, useState } from 'react'
import Head from 'next/head'
import Navbar from '../../components/Navbar/Navbar'
import ItemDetails from '../../components/Details/ItemDetails'
import ItemSlider from '../../components/ItemSlider'
import WrappedItemSlider from '../../components/WrappedItemSlider'

import { useRouter } from 'next/router'
import axios from 'axios'
import actionTypes from '../../context/action-types'
import { useStateValue } from '../../context/context'
import { ToastContainer, toast } from 'react-toastify'
import 'react-toastify/dist/ReactToastify.css'
import url from '../../data'
import Footer from '../../components/Footer'

const details = () => {
  const { query } = useRouter()

  const [details, setDetails] = useState({})
  const [loader, setLoader] = useState(false)

  const [{ onSaleNft, createdNft }, dispatch] = useStateValue()

  useEffect(() => {
    axios
      .post(`${url}/nft/nftListing`, {
        length: 20,
        start: 0,
        sTextsearch: '',
        sCategory: '',
        sSortingType: '',
        sSellingType: '',
      })
      .then((response) => {
        dispatch({
          type: actionTypes.SET_NFT_CREATED_BY_USER,
          payload: response?.data?.data?.data,
        })
      })
  }, [])

  useEffect(() => {
    axios
      .get(`${url}/nft/viewnft/${query.item}`)
      .then((response) => {
        setDetails(response?.data?.data)
      })
      .catch((err) => {
        console.log('errrrrr', err)
      })
  }, [query.item])

  return (
    <>
      <Head>
        <title>Epiko NFT Marketplace</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="favicon.svg" />
      </Head>
      <Navbar />
      <ItemDetails data={details} loader={loader} setLoader={setLoader} />
      {/* <ItemSlider createdNft={createdNft} /> */}
      <WrappedItemSlider createdNft={createdNft} />
      <ToastContainer
        position="top-center"
        autoClose={5000}
        hideProgressBar={false}
        newestOnTop={false}
        closeOnClick
        rtl={false}
        pauseOnFocusLoss
        draggable
        pauseOnHover
      />
      <Footer />
    </>
  )
}

export default details
